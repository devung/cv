/* Style elements */
* {
  margin: 0;
  padding: 0;
}

body {
  background-color: black;
  padding: 1em;
  font-family: Consolas, Menlo, Droid Sans Mono, Courier, Courier New;
  color: #c3c3c3;
}
input {
  caret-color: transparent;
  border-style: none;
  font-size: inherit;
  font-family: Consolas, Menlo, Droid Sans Mono, Courier, Courier New;
  color: #c3c3c3;
  background-color: black;
  outline: none;
  /* fix for safari; cuts first character */
  text-align: right; 
}
span { color: #c3c3c3; }


/* Style elements with specific #Ids */
#console-log-default span {
  display: inline-block;
  white-space:pre-wrap;
}
#console-input-current:focus { outline: none; }
#help-inline {
  display: block;
  opacity: 40%;
}


/* Style elements with specific .Classes */
.console-result {
  display: block;
  white-space:pre-wrap;
}
.hide { display: none; }


/* Style element json specific classes */
/* indent all child keys and values */
.key + div { padding-left: 4ch; }
@media only screen and (max-width: 500px) {
  .key + div {
    padding-left: 2ch;
  }
}


/* Style json keys */
.parent::before {
  /* Add extra new line between parent json keys */
  content: ' ';
  display: block;
}
.key { 
  /* align all text value to the right */
  white-space: pre;
}
  /* add : separator after each key*/
.key::after {
  /* key - text values */
  content: ' : ';
}
.object > .child::after{
  /* key : array values */
  content: " :";
}
@media only screen and (max-width: 500px) {
  span.key {
    /* key - text values */
    visibility: hidden;
  }
  span.key::before {
    visibility: visible;
    content: attr(data-key) " : ";
  }
}


/* Style json text values */
.value {
  /* align values to the right of its key */
  display: inline-grid;
}
@media only screen and (max-width: 500px) {
  .key + .value {
    display: block;
    margin-left: 2ch;
  }
  .hide + .value {
    margin-left: 0ch;
  }

}


/* Style json array values */
.array > div.element-object:nth-child(n+2) {
  /* add new line space between each object element in an array*/
  padding-top: 2ch;
}


/* Style json object values */
.child:not(:first-child) {
  /* Add extra new line between each key - array value */
  padding-top: 2ch;
}


/* Style elements with animations */
#console-cursor {
  animation: 1s blink step-end infinite;
  font-weight: bold;
}
@keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: #c3c3c3;
  }
}
.fade-in { animation: fadeIn ease-in 200ms; }
@keyframes fadeIn {
  0% {
    opacity:0;
  }
  100% {
    opacity:30%;
  }
}
.fade-out {
  animation: fadeOut ease-out 200ms 1;
  animation-fill-mode: forwards;
}
@keyframes fadeOut {
  0% {
    opacity:30%;
  }
  100% {
    opacity:0;
  }
}
